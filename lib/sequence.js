// Generated by CoffeeScript 1.7.1
(function() {
  var Sequence, operators,
    __slice = [].slice;

  operators = require('./operators');

  module.exports = Sequence = (function() {
    var FUNCTION_TO_FUNCTION, REST_AND_SEQUENCE_TO_SEQUENCE, SEQUENCE_AND_REST_TO_SEQUENCE, SEQUENCE_TO_VALUE, VALUE_TO_SEQUENCE, VALUE_TO_VALUE, fn, generatorOf, name, slice, _ref;

    slice = Array.prototype.slice;

    generatorOf = operators.functions.generatorOf;

    _ref = operators.signatures, VALUE_TO_VALUE = _ref[0], FUNCTION_TO_FUNCTION = _ref[1], VALUE_TO_SEQUENCE = _ref[2], SEQUENCE_TO_VALUE = _ref[3], SEQUENCE_AND_REST_TO_SEQUENCE = _ref[4], REST_AND_SEQUENCE_TO_SEQUENCE = _ref[5];

    function Sequence(iterable) {
      if (!(this instanceof Sequence)) {
        return new Sequence(iterable);
      }
      this.__hash__ = null;
      this.generator = generatorOf(iterable);
    }

    for (name in VALUE_TO_VALUE) {
      fn = VALUE_TO_VALUE[name];
      Sequence[name] = fn;
    }

    for (name in VALUE_TO_SEQUENCE) {
      fn = VALUE_TO_SEQUENCE[name];
      Sequence[name] = (function(fn) {
        return function() {
          return new Sequence(fn.apply(null, arguments));
        };
      })(fn);
    }

    Sequence.prototype.__iterator__ = function() {
      return this.generator.apply(this, arguments);
    };

    Sequence.prototype.call = function(context) {
      return this.generator.call(context, slice.call(arguments, 1));
    };

    Sequence.prototype.apply = function(context, args) {
      return this.generator.apply(context, args);
    };

    for (name in SEQUENCE_TO_VALUE) {
      fn = SEQUENCE_TO_VALUE[name];
      Sequence.prototype[name] = (function(fn) {
        return function() {
          return fn.apply(null, __slice.call(arguments).concat([this]));
        };
      })(fn);
    }

    for (name in SEQUENCE_AND_REST_TO_SEQUENCE) {
      fn = SEQUENCE_AND_REST_TO_SEQUENCE[name];
      Sequence.prototype[name] = (function(fn) {
        return function() {
          return new Sequence(fn.apply(null, [this].concat(__slice.call(arguments))));
        };
      })(fn);
    }

    for (name in REST_AND_SEQUENCE_TO_SEQUENCE) {
      fn = REST_AND_SEQUENCE_TO_SEQUENCE[name];
      Sequence.prototype[name] = (function(fn) {
        return function() {
          return new Sequence(fn.apply(null, __slice.call(arguments).concat([this])));
        };
      })(fn);
    }

    return Sequence;

  })();

}).call(this);
